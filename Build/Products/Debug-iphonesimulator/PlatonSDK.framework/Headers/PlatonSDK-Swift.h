// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlatonSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Base Post Payment API adaper
SWIFT_CLASS("_TtC9PlatonSDK17PlatonBaseAdapter")
@interface PlatonBaseAdapter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter to facilitate transaction payment capture during DMS
SWIFT_CLASS("_TtC9PlatonSDK20PlatonCaptureAdapter")
@interface PlatonCaptureAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class which holds all Platon credentials which was passed from <em>PlatonSdk.config(…)</em> methods
SWIFT_CLASS("_TtC9PlatonSDK17PlatonCredentials")
@interface PlatonCredentials : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// API adapter to facilitate both fund <em>PlatonStatus.refound</em> and fund <em>PlatonStatus.reversal</em> operations
SWIFT_CLASS("_TtC9PlatonSDK23PlatonCreditVoidAdapter")
@interface PlatonCreditVoidAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter to facilitate PlatonRecurring payments commonly used to create new transactions
/// based on already stored cardholder information from previous operations.
SWIFT_CLASS("_TtC9PlatonSDK22PlatonRecurringAdapter")
@interface PlatonRecurringAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The start point of usage Platon SDK is here
/// Before you get an account to access Payment Platform (Platon SDK),
/// you must provide the following data to the Payment Platform administrator:
/// IP list       - List of your IP addresses, from which requests to Payment Platform will be sent
/// Callback URL  - URL which will be receiving the notifications of the processing results of your
/// Payment Platform
/// Contact email - Client’s contact email
/// Note for Post client:
/// Callback URL is mandatory if you work in asynchronous mode, or if your account
/// supports 3D-Secure. The length of Callback URL shouldn’t be more than 255 symbols.
/// With all Payment Platform POST requests at Callback URL the Client must return the
/// string “OK” if he successfully received data or return “ERROR”.
/// Note for Web client:
/// The Client must provide an URL callback (Callback) to which the notifications will be sent
/// in case of successfully completed payments as well as the refunds and chargeback
/// notices. In any case when the system send a request to Callback URL, it should return
/// HTTP 200 code, otherwise the system will try to send a request again up to 5 times.
/// You should get the following information from administrator and
/// set them in <em>Platon-info.plist</em> to begin working with the Payment Platform:
/// <em>PlatonSDKConstants.clientKey</em> - client key
/// <em>PlatonSDKConstants.clientPass</em> - client password
/// <em>PlatonSDKConstants.paymentUrl</em> - payment url
/// Next field is required when your account support 3DSecure:
/// <em>PlatonSdkConstants.termUrl3ds</em> - user 3ds callback url
/// Then you should write the next code to init Platon SDK:
/// \code
/// PlatonSDK.config()
///
/// \endcodeIf can’t on don’t wont to use <em>Platon-info.plist</em>, you can configure PlatonSDK in code. You can configure PlatonSDK with following methods:
/// \code
/// PlatonSDK.config(credendials: PlatonCredentials(clientKey: "ClientKey",
///                                                clientPass: "ClientPass",
///                                                paymentUrl: "PaymentUrl"))
///
/// \endcode<em>or</em>
/// \code
/// PlatonSDK.config(credendials: PlatonCredentials(clientKey: "ClientKey",
///                                                clientPass: "ClientPass",
///                                                paymentUrl: "PaymentUrl",
///                                                termUrl3Ds: "TermUrl3Ds"))
///
/// \endcodeTo test/simulate your requests to Platon Payment System use <em>PlatonCard(test: Test?)</em> environment
SWIFT_CLASS("_TtC9PlatonSDK9PlatonSDK")
@interface PlatonSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// API adapter to facilitate transaction payment capture during SMS and first stage of DMS
SWIFT_CLASS("_TtC9PlatonSDK17PlatonSaleAdapter")
@interface PlatonSaleAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter to facilitate Scheduling/Deschedule payments (recurring)
/// Payer can make next variant of payment:
/// <ul>
///   <li>
///     regular with period between payments
///   </li>
///   <li>
///     restrict payment to specified amount (transaction)
///   </li>
///   <li>
///     can set delay after which first and further payments with specified period starts
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9PlatonSDK21PlatonScheduleAdapter")
@interface PlatonScheduleAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter to facilitate retrieving transaction data
SWIFT_CLASS("_TtC9PlatonSDK24PlatonTransactionAdapter")
@interface PlatonTransactionAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Base Web Payment API adaper
SWIFT_CLASS("_TtC9PlatonSDK20PlatonWebBaseAdapter")
@interface PlatonWebBaseAdapter : PlatonBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter for integration procedures and WebPaymentsOneClick protocol usage for e-commerce merchants
SWIFT_CLASS("_TtC9PlatonSDK28PlatonWebOneClickSaleAdapter")
@interface PlatonWebOneClickSaleAdapter : PlatonWebBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter for creating RECURRING_SALE transaction in web payments platform
/// PlatonRecurring payments used to create new transactions based on already stored cardholder information from previous operations
SWIFT_CLASS("_TtC9PlatonSDK25PlatonWebRecurringAdapter")
@interface PlatonWebRecurringAdapter : PlatonWebBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter for creating SALE transaction in web payments platform
SWIFT_CLASS("_TtC9PlatonSDK20PlatonWebSaleAdapter")
@interface PlatonWebSaleAdapter : PlatonWebBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter for creating SCHEDULE and DESCHEDULE options subscriptions in web payments platform
/// If the Client’s account supports recurring operations, the Client will be granted with special SCHEDULE_URL and DESCHEDULE_URL to which the POST request with special parameters must be sent to manage the schedule-based recurring payments
SWIFT_CLASS("_TtC9PlatonSDK24PlatonWebScheduleAdapter")
@interface PlatonWebScheduleAdapter : PlatonWebBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API adapter for creating SALE transaction in web payments platform
SWIFT_CLASS("_TtC9PlatonSDK25PlatonWebTokenSaleAdapter")
@interface PlatonWebTokenSaleAdapter : PlatonWebBaseAdapter
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
